package main

import (
	"bufio"
	"container/heap"
	"fmt"
	"os"
	"strconv"
	"strings"
)

var reader = bufio.NewReader(os.Stdin)
var writer = bufio.NewWriter(os.Stdout)

type item struct {
	a   int
	idx int
}

type minHeap []*item

func (h minHeap) Len() int {
	return len(h)
}

func (h minHeap) Less(i, j int) bool {
	return h[i].a < h[j].a
}

func (h minHeap) Swap(i, j int) {
	h[i], h[j] = h[j], h[i]
	h[i].idx = i
	h[j].idx = j
}

func (h *minHeap) Push(x interface{}) {
	n := len(*h)
	i := x.(*item)
	i.idx = n
	*h = append(*h, i)
}

func (h *minHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	x.idx = -1
	*h = old[0 : n-1]
	return x
}

func nextInts() []int {
	s, _ := reader.ReadString('\n')
	fs := strings.Fields(s)
	ns := make([]int, len(fs))
	for i, f := range fs {
		ns[i], _ = strconv.Atoi(f)
	}
	return ns
}

func main() {
	x := nextInts()
	N := x[0]
	L := x[1]
	A := nextInts()
	mins := &minHeap{}
	items := make([]*item, N)
	for i, a := range A {
		ex := i - L
		if ex >= 0 {
			heap.Remove(mins, items[ex].idx)
		}
		items[i] = &item{a, -1}
		heap.Push(mins, items[i])
		fmt.Fprintf(writer, "%d ", (*mins)[0].a)
	}
	_ = writer.Flush()
}
